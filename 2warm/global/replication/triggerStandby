#!/bin/bash

# triggerStandby
# Copyright (c) 2ndQuadrant, 2009
#
# Use triggerStandby to initiate "smart" failover,
# which will wait until all WAL files are consumed
# before starting up in normal mode.
# If need to start database faster, then specify
#   triggerStandby fast
# which will switch to "fast" failover, but with
# potential data loss.

#####################################################################
# Generic environment - shared by many of the scripts here.  Confirm
# environment is setup the way we expect before running anything
#####################################################################

function find_base
{
    # Validate if a hard-coded PGROOT points somewhere useful
    if [ ! -d "${PGROOT}" ] ; then
        # Figure out where this script is running from and guess
        # where PGROOT is at from there.  All of the major scripts
        # we run are 3 directory levels up from the PGROOT base.
        SCRIPTDIR=`dirname $0`
        pushd $SCRIPTDIR/../../..
        PGROOT=`pwd`
        popd
    fi

    # Basic validation that PGROOT has expected scripts
    CONFIGSCRIPT="${PGROOT}/2warm/global/replication/configSetup"
    if [ ! -f "${CONFIGSCRIPT}" ] ; then
      echo "ERROR:  PGROOT does not point to a complete 2warm installation."
      exit 1
    fi
}

# Bootstrap the rest of the standard initialization
find_base
source ${CONFIGSCRIPT}

#####################################################################
# End of generic environment setup
#####################################################################

require_pgdata
require_standby

# ensure that archiving won't activate immediately on new Primary
rm -f $LOCAL/replication/archiving_active

TRIGGERMODE=$1

# create trigger file to force pg_standby to stop
if [ ${TRIGGERMODE:-"smart"} == "fast" ] ; then
  echo "fast" > $PGDATA/trigger
  exit_on_error "Could not write to $PGDATA/trigger"
else
  touch $PGDATA/trigger
  exit_on_error "Could not write to $PGDATA/trigger"
fi

exit 0
