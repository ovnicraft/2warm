#!/bin/bash

# configStandby
# Copyright (c) 2ndQuadrant, 2009-2010
#
# Copies in required config files into data directory

#####################################################################
# Generic environment - shared by many of the scripts here.  Confirm
# environment is setup the way we expect before running anything
#####################################################################

function find_base
{
    # Validate if a hard-coded PGROOT points somewhere useful
    if [ ! -d "${PGROOT}" ] ; then
        # Figure out where this script is running from and guess
        # where PGROOT is at from there.  All of the major scripts
        # we run are 3 directory levels up from the PGROOT base.
        SCRIPTDIR=`dirname $0`
        pushd $SCRIPTDIR/../../.. >> /dev/null
        PGROOT=`pwd`
        popd >> /dev/null
    fi

    # Basic validation that PGROOT has expected scripts
    CONFIGSCRIPT="${PGROOT}/2warm/global/replication/configSetup"
    if [ ! -f "${CONFIGSCRIPT}" ] ; then
      echo "ERROR:  PGROOT does not point to a complete 2warm installation."
      exit 1
    fi
}

# Bootstrap the rest of the standard initialization
find_base
source ${CONFIGSCRIPT}

#####################################################################
# End of generic environment setup
#####################################################################

require_pgdata
exit_if_primary
require_archive

# Copy in files to configure Standby
cp $LOCAL/postgresql.conf $PGDATA/postgresql.conf
exit_on_error "Could not copy $LOCAL/postgresql.conf to $PGDATA/postgresql.conf"

cp $GLOBAL/recovery.conf $PGDATA/recovery.conf
exit_on_error "Could not copy $GLOBAL/recovery.conf to $PGDATA/recovery.conf"

# Ensure that Standby won't activate immediately on new Primary
rm -f $PGDATA/trigger

# Erase contents of pg_xlog but not the directory, as not to break
# symlink'd pg_xlog setups

rm -rf $PGDATA/pg_xlog/*
mkdir -p $PGDATA/pg_xlog/archive_status

echo Standby system is ready, shipped archives will appear in ${ARCHIVE}

exit 0
